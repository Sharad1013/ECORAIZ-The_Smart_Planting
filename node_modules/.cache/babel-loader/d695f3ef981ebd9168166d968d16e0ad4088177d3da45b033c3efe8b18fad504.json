{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\progoogle\\\\Downloads\\\\ecoraiz-visual\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport ImageGrid from './components/ImageGrid';\nimport DataTable from './components/DataTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultZones = Array(9).fill({\n  pH: '',\n  humidity: '',\n  moisture: ''\n});\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [zones, setZones] = useState(defaultZones);\n  const [ranks, setRanks] = useState([]);\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    const url = URL.createObjectURL(file);\n    setImage(url);\n    setZones(defaultZones);\n    setRanks([]);\n  };\n  const handleChange = (index, field, value) => {\n    const updated = [...zones];\n    updated[index] = {\n      ...updated[index],\n      [field]: parseFloat(value) || ''\n    };\n    setZones(updated);\n  };\n  const forestSpeciesDB = [{\n    name: 'Neem Tree 🌳',\n    role: 'Medicinal, air purification',\n    pH: [6.0, 8.0],\n    humidity: [30, 60],\n    moisture: [20, 40]\n  }, {\n    name: 'Bamboo 🎋',\n    role: 'Erosion control, fast growth',\n    pH: [5.5, 6.5],\n    humidity: [50, 80],\n    moisture: [50, 70]\n  }, {\n    name: 'Peepal Tree 🌿',\n    role: 'Sacred, oxygen producer',\n    pH: [6.0, 7.5],\n    humidity: [30, 70],\n    moisture: [20, 50]\n  }, {\n    name: 'Teak Tree 🌲',\n    role: 'Timber & canopy coverage',\n    pH: [6.5, 7.5],\n    humidity: [40, 70],\n    moisture: [30, 50]\n  }, {\n    name: 'Amla 🍏',\n    role: 'Fruit, wildlife support',\n    pH: [6.0, 8.0],\n    humidity: [40, 70],\n    moisture: [30, 50]\n  }, {\n    name: 'Wild Grass 🌾',\n    role: 'Soil stabilizer, insect support',\n    pH: [5.5, 7.5],\n    humidity: [40, 80],\n    moisture: [30, 70]\n  }];\n  const getForestSuggestions = zone => {\n    const suitable = forestSpeciesDB.filter(tree => {\n      const [minPH, maxPH] = tree.pH;\n      const [minHum, maxHum] = tree.humidity;\n      const [minMoist, maxMoist] = tree.moisture;\n      return zone.pH >= minPH && zone.pH <= maxPH && zone.humidity >= minHum && zone.humidity <= maxHum && zone.moisture >= minMoist && zone.moisture <= maxMoist;\n    });\n    return suitable.map(t => `${t.name} (${t.role})`).join(', ') || '❌ No suitable match';\n  };\n  const analyze = () => {\n    const scored = zones.map((z, i) => {\n      let score = 0;\n      if (z.pH >= 6 && z.pH <= 7.5) score++;\n      if (z.humidity >= 40 && z.humidity <= 70) score++;\n      if (z.moisture >= 30 && z.moisture <= 60) score++;\n      return {\n        index: i,\n        score\n      };\n    });\n    scored.sort((a, b) => b.score - a.score);\n    const rankList = Array(9).fill(null);\n    scored.forEach((zone, rank) => {\n      rankList[zone.index] = rank;\n    });\n    setRanks(rankList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83C\\uDF31 Ecoraiz \\u2013 Reforestation Zone Planner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Upload a valley map, enter environmental data zone-wise, and get ideal forest species suggestions to protect biodiversity and rebuild ecosystems.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"layout\",\n      children: [image && /*#__PURE__*/_jsxDEV(ImageGrid, {\n        image: image,\n        ranks: ranks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n        zones: zones,\n        onChange: handleChange,\n        getSuggestion: getForestSuggestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: analyze,\n      children: \"Analyze\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+MgTOFVOwW6xKGCdQ6WnFh2StcA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ImageGrid","DataTable","jsxDEV","_jsxDEV","defaultZones","Array","fill","pH","humidity","moisture","App","_s","image","setImage","zones","setZones","ranks","setRanks","handleImageUpload","e","file","target","files","url","URL","createObjectURL","handleChange","index","field","value","updated","parseFloat","forestSpeciesDB","name","role","getForestSuggestions","zone","suitable","filter","tree","minPH","maxPH","minHum","maxHum","minMoist","maxMoist","map","t","join","analyze","scored","z","i","score","sort","a","b","rankList","forEach","rank","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","getSuggestion","onClick","_c","$RefreshReg$"],"sources":["C:/Users/progoogle/Downloads/ecoraiz-visual/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport ImageGrid from './components/ImageGrid';\nimport DataTable from './components/DataTable';\n\nconst defaultZones = Array(9).fill({ pH: '', humidity: '', moisture: '' });\n\nfunction App() {\n  const [image, setImage] = useState(null);\n  const [zones, setZones] = useState(defaultZones);\n  const [ranks, setRanks] = useState([]);\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    const url = URL.createObjectURL(file);\n    setImage(url);\n    setZones(defaultZones);\n    setRanks([]);\n  };\n\n  const handleChange = (index, field, value) => {\n    const updated = [...zones];\n    updated[index] = { ...updated[index], [field]: parseFloat(value) || '' };\n    setZones(updated);\n  };\n\n  const forestSpeciesDB = [\n    {\n      name: 'Neem Tree 🌳',\n      role: 'Medicinal, air purification',\n      pH: [6.0, 8.0],\n      humidity: [30, 60],\n      moisture: [20, 40],\n    },\n    {\n      name: 'Bamboo 🎋',\n      role: 'Erosion control, fast growth',\n      pH: [5.5, 6.5],\n      humidity: [50, 80],\n      moisture: [50, 70],\n    },\n    {\n      name: 'Peepal Tree 🌿',\n      role: 'Sacred, oxygen producer',\n      pH: [6.0, 7.5],\n      humidity: [30, 70],\n      moisture: [20, 50],\n    },\n    {\n      name: 'Teak Tree 🌲',\n      role: 'Timber & canopy coverage',\n      pH: [6.5, 7.5],\n      humidity: [40, 70],\n      moisture: [30, 50],\n    },\n    {\n      name: 'Amla 🍏',\n      role: 'Fruit, wildlife support',\n      pH: [6.0, 8.0],\n      humidity: [40, 70],\n      moisture: [30, 50],\n    },\n    {\n      name: 'Wild Grass 🌾',\n      role: 'Soil stabilizer, insect support',\n      pH: [5.5, 7.5],\n      humidity: [40, 80],\n      moisture: [30, 70],\n    }\n  ];\n\n  const getForestSuggestions = (zone) => {\n    const suitable = forestSpeciesDB.filter((tree) => {\n      const [minPH, maxPH] = tree.pH;\n      const [minHum, maxHum] = tree.humidity;\n      const [minMoist, maxMoist] = tree.moisture;\n  \n      return (\n        zone.pH >= minPH && zone.pH <= maxPH &&\n        zone.humidity >= minHum && zone.humidity <= maxHum &&\n        zone.moisture >= minMoist && zone.moisture <= maxMoist\n      );\n    });\n  \n    return suitable.map(t => `${t.name} (${t.role})`).join(', ') || '❌ No suitable match';\n  };\n  \n\n  const analyze = () => {\n    const scored = zones.map((z, i) => {\n      let score = 0;\n      if (z.pH >= 6 && z.pH <= 7.5) score++;\n      if (z.humidity >= 40 && z.humidity <= 70) score++;\n      if (z.moisture >= 30 && z.moisture <= 60) score++;\n      return { index: i, score };\n    });\n\n    scored.sort((a, b) => b.score - a.score);\n    const rankList = Array(9).fill(null);\n    scored.forEach((zone, rank) => {\n      rankList[zone.index] = rank;\n    });\n    setRanks(rankList);\n  };\n\n  return (\n    <div className=\"app\">\n    <h1>🌱 Ecoraiz – Reforestation Zone Planner</h1>\n    <p>Upload a valley map, enter environmental data zone-wise, and get ideal forest species suggestions to protect biodiversity and rebuild ecosystems.</p>\n\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n      <div className=\"layout\">\n        {image && <ImageGrid image={image} ranks={ranks} />}\n        <DataTable\n  zones={zones}\n  onChange={handleChange}\n  getSuggestion={getForestSuggestions}\n/>\n\n      </div>\n      <button onClick={analyze}>Analyze</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,YAAY,GAAGC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;EAAEC,EAAE,EAAE,EAAE;EAAEC,QAAQ,EAAE,EAAE;EAAEC,QAAQ,EAAE;AAAG,CAAC,CAAC;AAE1E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAACK,YAAY,CAAC;EAChD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMmB,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IACrCP,QAAQ,CAACU,GAAG,CAAC;IACbR,QAAQ,CAACX,YAAY,CAAC;IACtBa,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAMS,YAAY,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC5C,MAAMC,OAAO,GAAG,CAAC,GAAGhB,KAAK,CAAC;IAC1BgB,OAAO,CAACH,KAAK,CAAC,GAAG;MAAE,GAAGG,OAAO,CAACH,KAAK,CAAC;MAAE,CAACC,KAAK,GAAGG,UAAU,CAACF,KAAK,CAAC,IAAI;IAAG,CAAC;IACxEd,QAAQ,CAACe,OAAO,CAAC;EACnB,CAAC;EAED,MAAME,eAAe,GAAG,CACtB;IACEC,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,6BAA6B;IACnC3B,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACdC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,EACD;IACEwB,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,8BAA8B;IACpC3B,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACdC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,EACD;IACEwB,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE,yBAAyB;IAC/B3B,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACdC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,EACD;IACEwB,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,0BAA0B;IAChC3B,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACdC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,EACD;IACEwB,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,yBAAyB;IAC/B3B,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACdC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,EACD;IACEwB,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,iCAAiC;IACvC3B,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACdC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAClBC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC,CACF;EAED,MAAM0B,oBAAoB,GAAIC,IAAI,IAAK;IACrC,MAAMC,QAAQ,GAAGL,eAAe,CAACM,MAAM,CAAEC,IAAI,IAAK;MAChD,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,GAAGF,IAAI,CAAChC,EAAE;MAC9B,MAAM,CAACmC,MAAM,EAAEC,MAAM,CAAC,GAAGJ,IAAI,CAAC/B,QAAQ;MACtC,MAAM,CAACoC,QAAQ,EAAEC,QAAQ,CAAC,GAAGN,IAAI,CAAC9B,QAAQ;MAE1C,OACE2B,IAAI,CAAC7B,EAAE,IAAIiC,KAAK,IAAIJ,IAAI,CAAC7B,EAAE,IAAIkC,KAAK,IACpCL,IAAI,CAAC5B,QAAQ,IAAIkC,MAAM,IAAIN,IAAI,CAAC5B,QAAQ,IAAImC,MAAM,IAClDP,IAAI,CAAC3B,QAAQ,IAAImC,QAAQ,IAAIR,IAAI,CAAC3B,QAAQ,IAAIoC,QAAQ;IAE1D,CAAC,CAAC;IAEF,OAAOR,QAAQ,CAACS,GAAG,CAACC,CAAC,IAAI,GAAGA,CAAC,CAACd,IAAI,KAAKc,CAAC,CAACb,IAAI,GAAG,CAAC,CAACc,IAAI,CAAC,IAAI,CAAC,IAAI,qBAAqB;EACvF,CAAC;EAGD,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,MAAM,GAAGpC,KAAK,CAACgC,GAAG,CAAC,CAACK,CAAC,EAAEC,CAAC,KAAK;MACjC,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIF,CAAC,CAAC5C,EAAE,IAAI,CAAC,IAAI4C,CAAC,CAAC5C,EAAE,IAAI,GAAG,EAAE8C,KAAK,EAAE;MACrC,IAAIF,CAAC,CAAC3C,QAAQ,IAAI,EAAE,IAAI2C,CAAC,CAAC3C,QAAQ,IAAI,EAAE,EAAE6C,KAAK,EAAE;MACjD,IAAIF,CAAC,CAAC1C,QAAQ,IAAI,EAAE,IAAI0C,CAAC,CAAC1C,QAAQ,IAAI,EAAE,EAAE4C,KAAK,EAAE;MACjD,OAAO;QAAE1B,KAAK,EAAEyB,CAAC;QAAEC;MAAM,CAAC;IAC5B,CAAC,CAAC;IAEFH,MAAM,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACH,KAAK,GAAGE,CAAC,CAACF,KAAK,CAAC;IACxC,MAAMI,QAAQ,GAAGpD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACpC4C,MAAM,CAACQ,OAAO,CAAC,CAACtB,IAAI,EAAEuB,IAAI,KAAK;MAC7BF,QAAQ,CAACrB,IAAI,CAACT,KAAK,CAAC,GAAGgC,IAAI;IAC7B,CAAC,CAAC;IACF1C,QAAQ,CAACwC,QAAQ,CAAC;EACpB,CAAC;EAED,oBACEtD,OAAA;IAAKyD,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACpB1D,OAAA;MAAA0D,QAAA,EAAI;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChD9D,OAAA;MAAA0D,QAAA,EAAG;IAAiJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEtJ9D,OAAA;MAAO+D,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAElD;IAAkB;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnE9D,OAAA;MAAKyD,SAAS,EAAC,QAAQ;MAAAC,QAAA,GACpBjD,KAAK,iBAAIT,OAAA,CAACH,SAAS;QAACY,KAAK,EAAEA,KAAM;QAACI,KAAK,EAAEA;MAAM;QAAA8C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnD9D,OAAA,CAACF,SAAS;QAChBa,KAAK,EAAEA,KAAM;QACbsD,QAAQ,EAAE1C,YAAa;QACvB2C,aAAa,EAAElC;MAAqB;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAES,CAAC,eACN9D,OAAA;MAAQmE,OAAO,EAAErB,OAAQ;MAAAY,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV;AAACtD,EAAA,CApHQD,GAAG;AAAA6D,EAAA,GAAH7D,GAAG;AAsHZ,eAAeA,GAAG;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}